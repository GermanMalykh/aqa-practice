name: Test

on: 
  workflow_dispatch:
    inputs:
      test_type:
        description: Choose test type
        required: true
        default: all
        type: choice
        options:
          - smoke
          - regression
          - all
  push:
    branches: [ main, master ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: pages_history
      
      - name: Download existing pages
        if: always()
        run: |
          if [ -d "pages_history" ]; then
            echo "Found existing pages history"
            ls -la pages_history/
          else
            echo "No existing pages history found"
            mkdir -p pages_history
          fi
      
      - name: Store pages history
        uses: actions/upload-artifact@v4
        with:
          name: pages-history
          path: pages_history
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: download-history
    environment: github-pages
    
    steps:
      # выкачиваем репозиторий
      - uses: actions/checkout@v4
      
      # настраиваем java
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      
      # Запускаем Selenoid напрямую
      - name: Start Selenoid
        run: |
          # Скачиваем и запускаем Selenoid
          curl -s https://aerokube.com/cm/bash | bash
          
          # Создаем конфигурацию Selenoid с уникальными профилями
          cat > selenoid.yml << EOF
          version: "1.0"
          sessions:
            max: 2
            idle: 60s
          browsers:
            chrome:
              image: selenoid/chrome:latest
              port: 4444
              path: /
              tmpfs:
                - "/tmp:size=512m"
                - "/var/tmp:size=512m"
              volumes:
                - "/dev/shm:/dev/shm"
              env:
                - TZ=UTC
              args:
                - "--no-sandbox"
                - "--disable-dev-shm-usage"
                - "--disable-gpu"
                - "--disable-web-security"
                - "--disable-features=VizDisplayCompositor"
                - "--disable-extensions"
                - "--disable-plugins"
                - "--disable-images"
                - "--disable-javascript"
                - "--disable-background-timer-throttling"
                - "--disable-backgrounding-occluded-windows"
                - "--disable-renderer-backgrounding"
                - "--disable-features=TranslateUI"
                - "--disable-ipc-flooding-protection"
                - "--disable-hang-monitor"
                - "--disable-prompt-on-repost"
                - "--disable-client-side-phishing-detection"
                - "--disable-component-extensions-with-background-pages"
                - "--disable-default-apps"
                - "--disable-sync"
                - "--metrics-recording-only"
                - "--no-first-run"
                - "--safebrowsing-disable-auto-update"
                - "--disable-blink-features=AutomationControlled"
                - "--user-data-dir=/tmp/chrome-profile-\${RANDOM}"
          EOF
          
          # Запускаем Selenoid с конфигурацией
          ./cm selenoid start --config selenoid.yml
          
          # Ждем запуска и проверяем готовность
          echo "Waiting for Selenoid to start..."
          for i in {1..30}; do
            if curl -s http://localhost:4444/status > /dev/null 2>&1; then
              echo "Selenoid is ready!"
              break
            fi
            echo "Waiting for Selenoid... attempt $i/30"
            sleep 2
          done
          
          # Проверяем статус
          echo "=== Selenoid Status ==="
          curl -s http://localhost:4444/status || echo "Selenoid not ready yet"
          ps aux | grep selenoid || echo "Selenoid process not found"
          
          # Проверяем доступность Chrome
          echo "=== Chrome Availability ==="
          curl -s -X POST http://localhost:4444/wd/hub/session -H "Content-Type: application/json" -d '{"desiredCapabilities":{"browserName":"chrome"}}' | head -c 200 || echo "Chrome not available yet"
      
      # запускаем тесты
      - name: Run tests
        env:
          CI: true
        run: |
          ./gradlew clean test \
            -Dselenide.remote=http://localhost:4444/wd/hub \
            -Dselenide.browser=chrome \
            -Dselenide.pageLoadStrategy=eager \
            -Dselenide.timeout=10000 \
            -Dselenide.pollingInterval=200 \
            -Dselenide.holdBrowserOpen=false \
            -Dselenide.reopenBrowserOnFail=false \
            -Dselenide.remoteReadTimeout=300000 \
            -Dselenide.remoteConnectionTimeout=300000 \
            --continue --no-daemon --info --stacktrace || true
          echo "=== Test Results ==="
          find build/reports/tests -name "*.html" -exec echo "Report: {}" \;
          echo "=== Allure Results ==="
          ls -la build/allure-results/ || echo "No Allure results"
      
      # генерируем отчет Allure
      - name: Generate Allure Report
        if: always()
        run: |
          ./gradlew allureReport
          echo "=== Allure Report Directory ==="
          ls -la build/reports/allure-report/ || echo "No Allure report"
      
      # Скачиваем историю страниц
      - name: Download pages history
        uses: actions/download-artifact@v4
        with:
          name: pages-history
          path: pages_history
      
      # Копируем историю в отчеты
      - name: Copy history to reports
        if: always()
        run: |
          if [ -d "pages_history" ] && [ -d "build/reports/allure-report" ]; then
            echo "Copying history to reports..."
            cp -r pages_history/* build/reports/allure-report/ || echo "Failed to copy history"
            ls -la build/reports/allure-report/
          else
            echo "No history to copy or no reports generated"
          fi
      
      # Сохраняем отчеты как артефакт
      - name: Store Allure report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: build/reports/allure-report
          retention-days: 1
      
      # Очищаем Selenoid
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Selenoid and Chrome processes..."
          
          # Останавливаем Selenoid
          ./cm selenoid stop || true
          
          # Принудительно завершаем все процессы Chrome
          pkill -f chrome || true
          pkill -f chromedriver || true
          pkill -f selenoid || true
          
          # Очищаем временные файлы Chrome
          rm -rf /tmp/chrome-profile-* || true
          rm -rf /tmp/.org.chromium.Chromium.* || true
          rm -rf /tmp/.com.google.Chrome.* || true
          
          # Очищаем shared memory
          rm -rf /dev/shm/* || true
          
          echo "Cleanup completed"

  publish-report:
    runs-on: ubuntu-latest
    needs: test
    name: Report publication
    environment: github-pages
    
    steps:
      # Скачиваем отчеты
      - name: Download Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report
      
      # Обновляем ветку gh-pages
      - name: Update gh-pages branch
        run: |
          # Создаем отдельную папку для работы с git
          mkdir -p gh-pages-work
          cd gh-pages-work
          
          # Клонируем репозиторий с токеном
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/GermanMalykh/aqa-practice.git .
          
          # Переключаемся на ветку gh-pages
          git checkout gh-pages || git checkout -b gh-pages
          
          # Очищаем ветку (кроме .git)
          find . -not -path './.git*' -not -path '.' -delete
          
          # Копируем отчеты Allure в корень
          cp -r ../allure-report/* . || echo "Failed to copy reports"
          
          # Добавляем .nojekyll файл
          echo "# GitHub Pages" > .nojekyll
          
          # Проверяем содержимое
          ls -la
          echo "=== Checking for index.html ==="
          ls -la index.html || echo "index.html not found!"
          
          # Настраиваем git
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          # Коммитим изменения
          git add .
          git commit -m "Update Allure reports $(date)" || echo "No changes to commit"
          
          # Пушим изменения
          git push origin gh-pages --force
      
      # настраиваем GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: always()
      
      # загружаем артефакт для GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          path: './allure-report'
      
      # публикуем отчет на GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: always()
