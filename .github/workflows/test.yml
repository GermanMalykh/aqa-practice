name: Test

on: 
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    environment: github-pages
    
    steps:
      # выкачиваем репозиторий
      - uses: actions/checkout@v4
      
      # настраиваем java
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      
      # Запускаем Selenoid через Docker
      - name: Start Selenoid
        run: |
          # Создаем docker-compose.yml для Selenoid
          cat > docker-compose.yml << 'EOF'
          version: '3'
          services:
            selenoid:
              image: aerokube/selenoid:latest-release
              container_name: selenoid
              ports:
                - "4444:4444"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
              command: ["-limit", "2", "-browser", "chrome", "-browser", "firefox"]
              environment:
                - OVERRIDE_SELENOID_VERSION=1.10.7
          
            selenoid-ui:
              image: aerokube/selenoid-ui:latest-release
              container_name: selenoid-ui
              ports:
                - "8080:8080"
              environment:
                - SELENOID_URI=http://selenoid:4444
              depends_on:
                - selenoid
          EOF
          
          # Запускаем Selenoid
          docker-compose up -d
          
          # Ждем запуска
          sleep 10
          
          # Проверяем статус
          curl -s http://localhost:4444/status || echo "Selenoid not ready yet"
          docker ps
      
      # запускаем тесты
      - name: Run tests
        env:
          CI: true
        run: |
          ./gradlew clean test -Dselenide.remote=http://localhost:4444/wd/hub --continue --no-daemon --info --stacktrace || true
          echo "=== Test Results ==="
          find build/reports/tests -name "*.html" -exec echo "Report: {}" \;
          echo "=== Allure Results ==="
          ls -la build/allure-results/ || echo "No Allure results"
      
      # генерируем отчет Allure
      - name: Generate Allure Report
        if: always()
        run: |
          ./gradlew allureReport
          echo "=== Allure Report Directory ==="
          ls -la build/reports/allure-report/ || echo "No Allure report"
      
      # скачиваем историю тестов (gh-pages ветку)
      - uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
      
      # генерируем отчет с историей
      - uses: simple-elf/allure-report-action@master
        if: always()
        with:
          gh_pages: gh-pages
          allure_results: build/allure-results
          allure_report: allure-report
          allure_history: allure-history
      
      # настраиваем GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: always()
      
      # загружаем артефакт для GitHub Pages
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          path: './gh-pages/allure-history'
      
      # публикуем отчет на GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: always()
      
      # Очищаем Docker контейнеры
      - name: Cleanup
        if: always()
        run: |
          docker-compose down || true
          docker system prune -f || true
