plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
}

group 'aqa.practice'
version '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

def junit5Version = '5.13.4'
def selenideVersion = '7.9.4'
def slf4jVersion = '2.0.17'
def allureVersion = '2.29.0'
def assertjVersion = '3.27.4'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:${junit5Version}",
            "com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-junit5:${allureVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "org.assertj:assertj-core:${assertjVersion}"
    )
    testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
}

allure {
    report {
        version.set(allureVersion)
        // Настройки для сохранения истории
        reportDir.set(file("build/reports/allure-report"))
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

// Примечание: Allure плагин автоматически создает задачи:
// - allureReport - генерация отчета
// - allureServe - локальный сервер с отчетом
// - allureResults - сбор результатов тестов

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "Gradle", gradle.gradleVersion
    systemProperty "allure.results.directory", "build/allure-results"
    systemProperty "allure.report.directory", "build/reports/allure-report"
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

// Задача для очистки старых отчетов
task cleanReports(type: Delete) {
    delete fileTree(dir: 'build/allure-results', includes: ['**/*'])
}

// Задача для принудительного обновления отчетов
task forceUpdateReports {
    dependsOn cleanReports
    doLast {
        println "Reports cleaned and ready for update"
    }
}
